@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<Student>

@{
    string[] fields = ["Id", "Name", "Gender", "Program"];
}

@Html.Hidden("sort", "", new { form = "f" })
@Html.Hidden("dir" , "", new { form = "f" })

<p>
    @Model.Count() of @Model.TotalItemCount record(s) |
    Page @Model.PageNumber of @Model.PageCount
</p>

<table class="table">
    <tr>
        @foreach (var f in fields)
        {
            string d = "asc";
            string c = "";

            if (f == ViewBag.Sort)
            {
                d = ViewBag.Dir == "des" ? "asc" : "des";
                c = ViewBag.Dir;
            }

            <th>
                <a data-ajax="true"
                   data-ajax-update="#target"
                   data-ajax-loading="#loader"
                   href="?name=@ViewBag.Name&sort=@f&dir=@d" class="@c">@f</a>
            </th>
        }
        <th></th>
    </tr>

    @foreach (var s in Model)
    {
        <tr>
            <td>@s.Id</td>
            <td>@s.Name</td>
            <td>@s.Gender</td>
            <td>@s.ProgramId</td>
            <td>
                <button data-get="/Home/Detail/@s.Id">Detail</button>
            </td>
        </tr>
    }
</table>

@{
    var options = PagedListRenderOptions.ClassicPlusFirstAndLast;
    options.LinkToFirstPageFormat    = "First";
    options.LinkToLastPageFormat     = "Last";
    options.LinkToPreviousPageFormat = "Previous";
    options.LinkToNextPageFormat     = "Next";

    var ajaxOptions = new AjaxOptions
    {
        HttpMethod       = "get",
        UpdateTargetId   = "target",
        LoadingElementId = "#loader",
    };
}

@Html.PagedListPager(
    Model,
    p => $"?name={ViewBag.Name}&sort={ViewBag.Sort}&dir={ViewBag.Dir}&page={p}",
    PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(options, ajaxOptions)
)
